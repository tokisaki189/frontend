{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-12a21a89\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"edit-container\"\n};\nconst _hoisted_3 = {\n  class: \"oldOrder\"\n};\nconst _hoisted_4 = {\n  class: \"totalPrice\"\n};\nconst _hoisted_5 = {\n  class: \"newOrder\"\n};\nconst _hoisted_6 = {\n  action: \"\",\n  class: \"form-edit\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"normal\"\n}, \"Change Normal Seat Order\", -1 /* HOISTED */));\nconst _hoisted_8 = [\"max\"];\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"business\"\n}, \"Change Business Seat Order\", -1 /* HOISTED */));\nconst _hoisted_10 = [\"max\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, _toDisplayString($setup.plane), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.formatDate($setup.departureDate)), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.departureCity), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.departureTime), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.formatDate($setup.arrivalDate)), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.arrivalCity), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.arrivalTime), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, \"Normal Seat Ordered: \" + _toDisplayString($setup.normalSeatOrder), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Business Seat Ordered: \" + _toDisplayString($setup.businessSeatOrder), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_4, \"Total Price: \" + _toDisplayString($setup.totalPrice) + \"$\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"form\", _hoisted_6, [_createElementVNode(\"div\", null, [_hoisted_7, _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    name: \"\",\n    id: \"normal\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newnormalSeatOrder = $event),\n    min: \"0\",\n    max: $setup.normalSeat\n  }, null, 8 /* PROPS */, _hoisted_8), [[_vModelText, $setup.newnormalSeatOrder]])]), _createElementVNode(\"div\", null, [_hoisted_9, _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    name: \"\",\n    id: \"business\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newbusinessSeatOrder = $event),\n    min: \"0\",\n    max: $setup.businessSeat\n  }, null, 8 /* PROPS */, _hoisted_10), [[_vModelText, $setup.newbusinessSeatOrder]])]), _createElementVNode(\"p\", null, \"New Price:\" + _toDisplayString($setup.newTotalPrice), 1 /* TEXT */)])])])]);\n}","map":{"version":3,"names":["class","action","_createElementVNode","for","_createElementBlock","_hoisted_1","_toDisplayString","$setup","plane","formatDate","departureDate","departureCity","departureTime","arrivalDate","arrivalCity","arrivalTime","_hoisted_2","_hoisted_3","normalSeatOrder","businessSeatOrder","_hoisted_4","totalPrice","_hoisted_5","_hoisted_6","_hoisted_7","type","name","id","newnormalSeatOrder","$event","min","max","normalSeat","_hoisted_9","newbusinessSeatOrder","businessSeat","newTotalPrice"],"sources":["/home/prism/Documents/flyticket/src/views/EditView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <p>{{ plane }}</p>\n    <p>{{ formatDate(departureDate) }}</p>\n    <p>{{ departureCity }}</p>\n    <p>{{ departureTime }}</p>\n    <p>{{ formatDate(arrivalDate) }}</p>\n    <p>{{ arrivalCity }}</p>\n    <p>{{ arrivalTime }}</p>\n    <div class=\"edit-container\">\n      <div class=\"oldOrder\">\n        <p>Normal Seat Ordered: {{ normalSeatOrder }}</p>\n        <p>Business Seat Ordered: {{ businessSeatOrder }}</p>\n        <div class=\"totalPrice\">Total Price: {{ totalPrice }}$</div>\n      </div>\n      <div class=\"newOrder\">\n        <form action=\"\" class=\"form-edit\">\n          <div>\n            <label for=\"normal\">Change Normal Seat Order</label>\n            <input\n              type=\"number\"\n              name=\"\"\n              id=\"normal\"\n              v-model=\"newnormalSeatOrder\"\n              min=\"0\"\n              :max=\"normalSeat\"\n            />\n          </div>\n          <div>\n            <label for=\"business\">Change Business Seat Order</label>\n            <input\n              type=\"number\"\n              name=\"\"\n              id=\"business\"\n              v-model=\"newbusinessSeatOrder\"\n              min=\"0\"\n              :max=\"businessSeat\"\n            />\n          </div>\n          <p>New Price:{{ newTotalPrice }}</p>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport { onMounted, ref, computed } from \"vue\";\nimport { useRoute } from \"vue-router\";\n\nimport api from \"../api\";\nexport default {\n  setup() {\n    let route = useRoute();\n    let id = route.query.id;\n    let plane = ref();\n    let businessSeatOrder = ref(0);\n    let normalSeatOrder = ref(0);\n    let newbusinessSeatOrder = ref(0);\n    let newnormalSeatOrder = ref(0);\n    let totalPrice = ref(0);\n    let departureTime = ref();\n    let arrivalTime = ref();\n    let normalSeat = ref();\n    let businessSeat = ref();\n    let normalPrice = ref();\n    let businessPrice = ref();\n    let departureDate = ref();\n    let departureCity = ref();\n    let arrivalDate = ref();\n    let arrivalCity = ref();\n    onMounted(() => {\n      console.log(id);\n      api\n        .get(\"/orderEdit/\" + id)\n        .then((response) => {\n          console.log(response.data);\n          plane.value = response.data[0].planes;\n          businessSeatOrder.value = response.data[0].business_seat_order;\n          normalSeatOrder.value = response.data[0].normal_seat_order;\n          normalSeat.value = response.data[0].normal_seat;\n          businessSeat.value = response.data[0].business_seat;\n          departureTime.value = response.data[0].departure_time;\n          arrivalTime.value = response.data[0].arrival_time;\n          totalPrice.value = response.data[0].total_price;\n          departureDate.value = response.data[0].departure_date;\n          departureCity.value = response.data[0].departure_city_name;\n          arrivalDate.value = response.data[0].arrival_date;\n          arrivalCity.value = response.data[0].arrival_city_name;\n          normalPrice.value = response.data[0].normal_price;\n          businessPrice.value = response.data[0].business_price;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    });\n    console.log(normalPrice);\n    let newTotalPrice = computed(() => {\n      let result =\n        newnormalSeatOrder.value * normalPrice.value +\n        newbusinessSeatOrder.value * businessPrice.value;\n      return isNaN(result) ? 0 : result;\n    });\n    function formatDate(date) {\n      let dateObj = new Date(date);\n      const year = dateObj.getFullYear();\n      const month = dateObj.getMonth() + 1;\n      const day = dateObj.getDate();\n      return `${day}-${month}-${year}`;\n    }\n    return {\n      formatDate,\n      plane,\n      businessSeatOrder,\n      normalSeatOrder,\n      newbusinessSeatOrder,\n      newnormalSeatOrder,\n      totalPrice,\n      newTotalPrice,\n      departureCity,\n      departureDate,\n      arrivalDate,\n      arrivalCity,\n      normalSeat,\n      businessSeat,\n      normalPrice,\n      businessPrice,\n      departureTime,\n      arrivalTime,\n    };\n  },\n};\n</script>\n<style scoped>\n.container {\n  width: 100%;\n  background-color: red;\n}\n.edit-container {\n  display: flex;\n  flex-direction: row;\n  margin: auto;\n  padding: auto;\n  justify-content: center;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAW;;EAQfA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAU;;EAGdA,KAAK,EAAC;AAAY;;EAEpBA,KAAK,EAAC;AAAU;;EACbC,MAAM,EAAC,EAAE;EAACD,KAAK,EAAC;;gEAElBE,mBAAA,CAAoD;EAA7CC,GAAG,EAAC;AAAQ,GAAC,0BAAwB;;gEAW5CD,mBAAA,CAAwD;EAAjDC,GAAG,EAAC;AAAU,GAAC,4BAA0B;;;uBA5B1DC,mBAAA,CA0CM,OA1CNC,UA0CM,GAzCJH,mBAAA,CAAkB,WAAAI,gBAAA,CAAZC,MAAA,CAAAC,KAAK,kBACXN,mBAAA,CAAsC,WAAAI,gBAAA,CAAhCC,MAAA,CAAAE,UAAU,CAACF,MAAA,CAAAG,aAAa,mBAC9BR,mBAAA,CAA0B,WAAAI,gBAAA,CAApBC,MAAA,CAAAI,aAAa,kBACnBT,mBAAA,CAA0B,WAAAI,gBAAA,CAApBC,MAAA,CAAAK,aAAa,kBACnBV,mBAAA,CAAoC,WAAAI,gBAAA,CAA9BC,MAAA,CAAAE,UAAU,CAACF,MAAA,CAAAM,WAAW,mBAC5BX,mBAAA,CAAwB,WAAAI,gBAAA,CAAlBC,MAAA,CAAAO,WAAW,kBACjBZ,mBAAA,CAAwB,WAAAI,gBAAA,CAAlBC,MAAA,CAAAQ,WAAW,kBACjBb,mBAAA,CAiCM,OAjCNc,UAiCM,GAhCJd,mBAAA,CAIM,OAJNe,UAIM,GAHJf,mBAAA,CAAiD,WAA9C,uBAAqB,GAAAI,gBAAA,CAAGC,MAAA,CAAAW,eAAe,kBAC1ChB,mBAAA,CAAqD,WAAlD,yBAAuB,GAAAI,gBAAA,CAAGC,MAAA,CAAAY,iBAAiB,kBAC9CjB,mBAAA,CAA4D,OAA5DkB,UAA4D,EAApC,eAAa,GAAAd,gBAAA,CAAGC,MAAA,CAAAc,UAAU,IAAG,GAAC,gB,GAExDnB,mBAAA,CA0BM,OA1BNoB,UA0BM,GAzBJpB,mBAAA,CAwBO,QAxBPqB,UAwBO,GAvBLrB,mBAAA,CAUM,cATJsB,UAAoD,E,gBACpDtB,mBAAA,CAOE;IANAuB,IAAI,EAAC,QAAQ;IACbC,IAAI,EAAC,EAAE;IACPC,EAAE,EAAC,QAAQ;+DACFpB,MAAA,CAAAqB,kBAAkB,GAAAC,MAAA;IAC3BC,GAAG,EAAC,GAAG;IACNC,GAAG,EAAExB,MAAA,CAAAyB;sDAFGzB,MAAA,CAAAqB,kBAAkB,E,KAK/B1B,mBAAA,CAUM,cATJ+B,UAAwD,E,gBACxD/B,mBAAA,CAOE;IANAuB,IAAI,EAAC,QAAQ;IACbC,IAAI,EAAC,EAAE;IACPC,EAAE,EAAC,UAAU;+DACJpB,MAAA,CAAA2B,oBAAoB,GAAAL,MAAA;IAC7BC,GAAG,EAAC,GAAG;IACNC,GAAG,EAAExB,MAAA,CAAA4B;uDAFG5B,MAAA,CAAA2B,oBAAoB,E,KAKjChC,mBAAA,CAAoC,WAAjC,YAAU,GAAAI,gBAAA,CAAGC,MAAA,CAAA6B,aAAa,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}