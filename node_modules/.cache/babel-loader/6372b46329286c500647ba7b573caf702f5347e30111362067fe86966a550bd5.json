{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  action: \"\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString($setup.plane), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.departureDate), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.departureCity), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.arrivalDate), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.arrivalCity), 1 /* TEXT */), _createElementVNode(\"form\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    name: \"\",\n    id: \"\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.normal = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.normal]])])]);\n}","map":{"version":3,"names":["action","_createElementBlock","_createElementVNode","_toDisplayString","$setup","plane","departureDate","departureCity","arrivalDate","arrivalCity","_hoisted_1","type","name","id","_ctx","normal","$event"],"sources":["/home/prism/Documents/flyticket/src/views/EditView.vue"],"sourcesContent":["<template>\n  <div>\n    <p>{{ plane }}</p>\n    <p>{{ departureDate }}</p>\n    <p>{{ departureCity }}</p>\n    <p>{{ arrivalDate }}</p>\n    <p>{{ arrivalCity }}</p>\n    <form action=\"\">\n        <input type=\"number\" name=\"\" id=\"\" v-model=\"normal\">\n    </form>\n  </div>\n</template>\n<script>\nimport { onMounted, ref } from \"vue\";\nimport { useRoute } from \"vue-router\";\n\nimport api from \"../api\";\nexport default {\n  setup() {\n    let route = useRoute();\n    let id = route.query.id;\n    let plane = ref();\n    let businessSeatOrder = ref();\n    let normalSeatOrder = ref();\n    let newbusinessSeatOrder = ref();\n    let newnormalSeatOrder = ref();\n    let totalprice = ref();\n    let newprice = ref();\n    let departureDate = ref();\n    let departureCity = ref();\n    let arrivalDate = ref();\n    let arrivalCity = ref();\n    onMounted(() => {\n      console.log(id);\n      api\n        .get(\"/orderEdit/\" + id)\n        .then((response) => {\n          console.log(response.data);\n          plane.value = response.data[0].planes;\n          businessSeatOrder.value = response.data[0].business_seat_order;\n          normalSeatOrder.value = response.data[0].normal_seat_order;\n          totalprice.value = response.data[0].total_price;\n          departureDate.value = response.data[0].departure_date;\n          departureCity.value = response.data[0].departure_city_name;\n          arrivalDate.value = response.data[0].arrival_date;\n          arrivalCity.value = response.data[0].arrival_city_name;\n          console.log(totalprice.value);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    });\n    return {\n      plane,\n      businessSeatOrder,\n      normalSeatOrder,\n      newbusinessSeatOrder,\n      newnormalSeatOrder,\n      totalprice,\n      newprice,\n      departureCity,\n      departureDate,\n      arrivalDate,\n      arrivalCity,\n    };\n  },\n};\n</script>\n<style></style>\n"],"mappings":";;EAOUA,MAAM,EAAC;AAAE;;uBANjBC,mBAAA,CASM,cARJC,mBAAA,CAAkB,WAAAC,gBAAA,CAAZC,MAAA,CAAAC,KAAK,kBACXH,mBAAA,CAA0B,WAAAC,gBAAA,CAApBC,MAAA,CAAAE,aAAa,kBACnBJ,mBAAA,CAA0B,WAAAC,gBAAA,CAApBC,MAAA,CAAAG,aAAa,kBACnBL,mBAAA,CAAwB,WAAAC,gBAAA,CAAlBC,MAAA,CAAAI,WAAW,kBACjBN,mBAAA,CAAwB,WAAAC,gBAAA,CAAlBC,MAAA,CAAAK,WAAW,kBACjBP,mBAAA,CAEO,QAFPQ,UAEO,G,gBADHR,mBAAA,CAAoD;IAA7CS,IAAI,EAAC,QAAQ;IAACC,IAAI,EAAC,EAAE;IAACC,EAAE,EAAC,EAAE;+DAAUC,IAAA,CAAAC,MAAM,GAAAC,MAAA;iDAANF,IAAA,CAAAC,MAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}