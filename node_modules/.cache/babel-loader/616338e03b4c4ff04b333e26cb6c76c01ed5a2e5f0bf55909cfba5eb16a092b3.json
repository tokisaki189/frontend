{"ast":null,"code":"import { ref, computed, onMounted, watch } from \"vue\";\nimport Chart from \"chart.js\";\nexport default {\n  setup() {\n    let dataset = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34];\n    let start = ref(0);\n    let end = ref(6);\n\n    // Use computed property to make data reactive\n    const data = computed(() => {\n      return dataset.slice(start.value, end.value);\n    });\n\n    // Use watcher to update chartData whenever data changes\n    const chartData = ref({\n      labels: [\"1th\", \"2th\", \"3th\", \"4th\", \"5th\", \"6th\", \"7th\"],\n      datasets: [{\n        data: []\n      }]\n    });\n    watch(data, () => {\n      chartData.value.datasets[0].data = data.value;\n      updateChart();\n    }, {\n      deep: true\n    });\n\n    // Helper function to update the chart\n    function updateChart() {\n      if (myChart) {\n        myChart.data = chartData.value;\n        myChart.update();\n      }\n    }\n    let myChart = null;\n    onMounted(() => {\n      // Create the chart on component mounted\n      myChart = new Chart(document.getElementById(\"chartCanvas\"), {\n        type: \"bar\",\n        // or other chart type\n        data: chartData.value,\n        options: {\n          // specify chart options here\n        }\n      });\n    });\n    return {\n      start,\n      end\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","Chart","setup","dataset","start","end","data","slice","value","chartData","labels","datasets","updateChart","deep","myChart","update","document","getElementById","type","options"],"sources":["/home/prism/Documents/flyticket/src/components/Admin/DashBoard.vue"],"sourcesContent":["<!-- <template>\n  <p>something</p>\n\n  <div class=\"container\">\n    <div class=\"d\"></div>\n  </div>\n  <div class=\"chart-container\">\n    <div class=\"chart\">\n      <Bar id=\"my-chart-id\" :options=\"chartOptions\" :data=\"chartData\" />\n    </div>\n    <canvas ref=\"chartCanvas\"></canvas>\n  </div>\n  <button @click=\"nextDay()\">+</button>\n  <p>{{ data }}</p>\n</template>\n<script>\nimport { onMounted, ref } from \"vue\";\nimport { Bar } from \"vue-chartjs\";\nimport { computed, watch } from \"vue\";\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from \"chart.js\";\nChartJS.register(\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale\n);\n\nexport default {\n  name: \"DashBoard\",\n  components: { Bar },\n  setup() {\n    let dataset = [\n      79, 42, 15, 68, 91, 34, 52, 23, 11, 86, 59, 72, 7, 50, 98, 64, 93, 3, 28,\n      89, 71, 96, 80, 18, 47, 39, 67, 9, 77,\n    ];\n\n    let start = ref(0);\n    let end = ref(6);\n    let data = computed(() => {\n      return dataset.slice(start.value, end.value);\n    });\n    console.log(data);\n    let chartData = ref({\n      labels: [\"1th\", \"2th\", \"3th\", \" 4th\", \"5th\", \"6th\", \"7th\"],\n      datasets: [\n        {\n          data: data.value,\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(54, 162, 235, 0.2)\",\n            \"rgba(255, 206, 86, 0.2)\",\n            \"rgba(75, 192, 192, 0.2)\",\n            \"rgba(153, 102, 255, 0.2)\",\n            \"rgba(255, 159, 64, 0.2)\",\n          ],\n          borderColor: [\n            \"rgba(255, 99, 132, 1)\",\n            \"rgba(54, 162, 235, 1)\",\n            \"rgba(255, 206, 86, 1)\",\n            \"rgba(75, 192, 192, 1)\",\n            \"rgba(153, 102, 255, 1)\",\n            \"rgba(255, 159, 64, 1)\",\n          ],\n          borderWidth: 1,\n        },\n      ],\n    });\n    let chartOptions = {\n      responsive: true,\n    };\n    watch(\n      data,\n      () => {\n        chartData.value.datasets[0].data = data.value;\n        updateChart();\n      },\n      { deep: true }\n    );\n    function updateChart() {\n      if (myChart) {\n        myChart.data = chartData.value;\n        myChart.update();\n      }\n    }\n    let myChart = null;\n    onMounted(() => {\n      myChart = new Chart(document.getElementById(\"chartCanvas\"), {\n        type: \"bar\", // or other chart type\n        data: chartData.value,\n        options: {\n          // specify chart options here\n        },\n      });\n    });\n    function nextDay() {\n      start.value++;\n      end.value++;\n    }\n    return {\n      chartData,\n      chartOptions,\n      dataset,\n      start,\n      end,\n      data,\n      nextDay,\n      myChart,\n    };\n  },\n};\n</script>\n<style>\n.chart {\n  width: 40%;\n}\n.chart-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n}\n</style> -->\n<template>\n  <div>\n    <canvas ref=\"chartCanvas\"></canvas>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, watch } from \"vue\";\nimport Chart from \"chart.js\";\n\nexport default {\n  setup() {\n    let dataset = [\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n      22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n    ];\n    let start = ref(0);\n    let end = ref(6);\n\n    // Use computed property to make data reactive\n    const data = computed(() => {\n      return dataset.slice(start.value, end.value);\n    });\n\n    // Use watcher to update chartData whenever data changes\n    const chartData = ref({\n      labels: [\"1th\", \"2th\", \"3th\", \"4th\", \"5th\", \"6th\", \"7th\"],\n      datasets: [\n        {\n          data: [],\n        },\n      ],\n    });\n\n    watch(\n      data,\n      () => {\n        chartData.value.datasets[0].data = data.value;\n        updateChart();\n      },\n      { deep: true }\n    );\n\n    // Helper function to update the chart\n    function updateChart() {\n      if (myChart) {\n        myChart.data = chartData.value;\n        myChart.update();\n      }\n    }\n\n    let myChart = null;\n\n    onMounted(() => {\n      // Create the chart on component mounted\n      myChart = new Chart(document.getElementById(\"chartCanvas\"), {\n        type: \"bar\", // or other chart type\n        data: chartData.value,\n        options: {\n          // specify chart options here\n        },\n      });\n    });\n\n    return {\n      start,\n      end,\n    };\n  },\n};\n</script>\n"],"mappings":"AA0IA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,KAAI,QAAS,KAAK;AACrD,OAAOC,KAAI,MAAO,UAAU;AAE5B,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,IAAIC,OAAM,GAAI,CACZ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACzE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CACnD;IACD,IAAIC,KAAI,GAAIP,GAAG,CAAC,CAAC,CAAC;IAClB,IAAIQ,GAAE,GAAIR,GAAG,CAAC,CAAC,CAAC;;IAEhB;IACA,MAAMS,IAAG,GAAIR,QAAQ,CAAC,MAAM;MAC1B,OAAOK,OAAO,CAACI,KAAK,CAACH,KAAK,CAACI,KAAK,EAAEH,GAAG,CAACG,KAAK,CAAC;IAC9C,CAAC,CAAC;;IAEF;IACA,MAAMC,SAAQ,GAAIZ,GAAG,CAAC;MACpBa,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;MACzDC,QAAQ,EAAE,CACR;QACEL,IAAI,EAAE;MACR,CAAC;IAEL,CAAC,CAAC;IAEFN,KAAK,CACHM,IAAI,EACJ,MAAM;MACJG,SAAS,CAACD,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACL,IAAG,GAAIA,IAAI,CAACE,KAAK;MAC7CI,WAAW,EAAE;IACf,CAAC,EACD;MAAEC,IAAI,EAAE;IAAK,EACd;;IAED;IACA,SAASD,WAAWA,CAAA,EAAG;MACrB,IAAIE,OAAO,EAAE;QACXA,OAAO,CAACR,IAAG,GAAIG,SAAS,CAACD,KAAK;QAC9BM,OAAO,CAACC,MAAM,EAAE;MAClB;IACF;IAEA,IAAID,OAAM,GAAI,IAAI;IAElBf,SAAS,CAAC,MAAM;MACd;MACAe,OAAM,GAAI,IAAIb,KAAK,CAACe,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,EAAE;QAC1DC,IAAI,EAAE,KAAK;QAAE;QACbZ,IAAI,EAAEG,SAAS,CAACD,KAAK;QACrBW,OAAO,EAAE;UACP;QAAA;MAEJ,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO;MACLf,KAAK;MACLC;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}