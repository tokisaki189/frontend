{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", null, null, -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"totalPrice\"\n};\nconst _hoisted_3 = {\n  action: \"\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"normal\"\n}, \"Normal Seat Order\", -1 /* HOISTED */);\nconst _hoisted_5 = [\"max\"];\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"business\"\n}, \"Business Seat Order\", -1 /* HOISTED */);\nconst _hoisted_7 = [\"max\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString($setup.plane), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.formatDate($setup.departureDate)), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.departureCity), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.departureTime), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.formatDate($setup.arrivalDate)), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.arrivalCity), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.arrivalTime), 1 /* TEXT */), _hoisted_1, _createElementVNode(\"div\", _hoisted_2, \"Total Price: \" + _toDisplayString($setup.totalPrice) + \"$\", 1 /* TEXT */), _createElementVNode(\"form\", _hoisted_3, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    name: \"\",\n    id: \"normal\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newnormalSeatOrder = $event),\n    min: \"0\",\n    max: $setup.normalSeat\n  }, null, 8 /* PROPS */, _hoisted_5), [[_vModelText, $setup.newnormalSeatOrder]]), _hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    name: \"\",\n    id: \"business\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newbusinessSeatOrder = $event),\n    min: \"0\",\n    max: $setup.businessSeat\n  }, null, 8 /* PROPS */, _hoisted_7), [[_vModelText, $setup.newbusinessSeatOrder]])])]);\n}","map":{"version":3,"names":["_createElementVNode","class","action","for","_createElementBlock","_toDisplayString","$setup","plane","formatDate","departureDate","departureCity","departureTime","arrivalDate","arrivalCity","arrivalTime","_hoisted_1","_hoisted_2","totalPrice","_hoisted_3","_hoisted_4","type","name","id","newnormalSeatOrder","$event","min","max","normalSeat","_hoisted_6","newbusinessSeatOrder","businessSeat"],"sources":["/home/prism/Documents/flyticket/src/views/EditView.vue"],"sourcesContent":["<template>\n  <div>\n    <p>{{ plane }}</p>\n    <p>{{ formatDate(departureDate) }}</p>\n    <p>{{ departureCity }}</p>\n    <p>{{ departureTime }}</p>\n    <p>{{ formatDate(arrivalDate) }}</p>\n    <p>{{ arrivalCity }}</p>\n    <p>{{ arrivalTime }}</p>\n    <p></p>\n    <div class=\"totalPrice\">Total Price: {{ totalPrice }}$</div>\n    <form action=\"\">\n      <label for=\"normal\">Normal Seat Order</label>\n      <input\n        type=\"number\"\n        name=\"\"\n        id=\"normal\"\n        v-model=\"newnormalSeatOrder\"\n        min=\"0\"\n        :max=\"normalSeat\"\n      />\n      <label for=\"business\">Business Seat Order</label>\n      <input\n        type=\"number\"\n        name=\"\"\n        id=\"business\"\n        v-model=\"newbusinessSeatOrder\"\n        min=\"0\"\n        :max=\"businessSeat\"\n      />\n    </form>\n  </div>\n</template>\n<script>\nimport { onMounted, ref, computed } from \"vue\";\nimport { useRoute } from \"vue-router\";\n\nimport api from \"../api\";\nexport default {\n  setup() {\n    let route = useRoute();\n    let id = route.query.id;\n    let plane = ref();\n    let businessSeatOrder = ref(0);\n    let normalSeatOrder = ref(0);\n    let newbusinessSeatOrder = ref();\n    let newnormalSeatOrder = ref();\n    let totalPrice = ref(0);\n    let departureTime = ref();\n    let arrivalTime = ref();\n    let normalSeat = ref();\n    let businessSeat = ref();\n    let normalPrice = ref();\n    let businessPrice = ref();\n    let departureDate = ref();\n    let departureCity = ref();\n    let arrivalDate = ref();\n    let arrivalCity = ref();\n    onMounted(() => {\n      console.log(id);\n      api\n        .get(\"/orderEdit/\" + id)\n        .then((response) => {\n          console.log(response.data);\n          plane.value = response.data[0].planes;\n          businessSeatOrder.value = response.data[0].business_seat_order;\n          normalSeatOrder.value = response.data[0].normal_seat_order;\n          normalSeat.value = response.data[0].normal_seat;\n          businessSeat.value = response.data[0].business_seat;\n          departureTime.value = response.data[0].departure_time;\n          arrivalTime.value = response.data[0].arrival_time;\n          totalPrice.value = response.data[0].total_price;\n          departureDate.value = response.data[0].departure_date;\n          departureCity.value = response.data[0].departure_city_name;\n          arrivalDate.value = response.data[0].arrival_date;\n          arrivalCity.value = response.data[0].arrival_city_name;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    });\n    let newTotalPrice = computed(() => {\n      let result =\n        normalSeatOrder.value * normalPrice.value +\n        businessSeatOrder.value * businessPrice.value;\n      return isNaN(result) ? 0 : result;\n    });\n    function formatDate(date) {\n      let dateObj = new Date(date);\n      const year = dateObj.getFullYear();\n      const month = dateObj.getMonth() + 1;\n      const day = dateObj.getDate();\n      return `${day}-${month}-${year}`;\n    }\n    return {\n      formatDate,\n      plane,\n      businessSeatOrder,\n      normalSeatOrder,\n      newbusinessSeatOrder,\n      newnormalSeatOrder,\n      totalPrice,\n      newTotalPrice,\n      departureCity,\n      departureDate,\n      arrivalDate,\n      arrivalCity,\n      normalSeat,\n      businessSeat,\n      normalPrice,\n      businessPrice,\n      departureTime,\n      arrivalTime,\n    };\n  },\n};\n</script>\n<style></style>\n"],"mappings":";gCASIA,mBAAA,CAAO;;EACFC,KAAK,EAAC;AAAY;;EACjBC,MAAM,EAAC;AAAE;gCACbF,mBAAA,CAA6C;EAAtCG,GAAG,EAAC;AAAQ,GAAC,mBAAiB;;gCASrCH,mBAAA,CAAiD;EAA1CG,GAAG,EAAC;AAAU,GAAC,qBAAmB;;;uBApB7CC,mBAAA,CA8BM,cA7BJJ,mBAAA,CAAkB,WAAAK,gBAAA,CAAZC,MAAA,CAAAC,KAAK,kBACXP,mBAAA,CAAsC,WAAAK,gBAAA,CAAhCC,MAAA,CAAAE,UAAU,CAACF,MAAA,CAAAG,aAAa,mBAC9BT,mBAAA,CAA0B,WAAAK,gBAAA,CAApBC,MAAA,CAAAI,aAAa,kBACnBV,mBAAA,CAA0B,WAAAK,gBAAA,CAApBC,MAAA,CAAAK,aAAa,kBACnBX,mBAAA,CAAoC,WAAAK,gBAAA,CAA9BC,MAAA,CAAAE,UAAU,CAACF,MAAA,CAAAM,WAAW,mBAC5BZ,mBAAA,CAAwB,WAAAK,gBAAA,CAAlBC,MAAA,CAAAO,WAAW,kBACjBb,mBAAA,CAAwB,WAAAK,gBAAA,CAAlBC,MAAA,CAAAQ,WAAW,kBACjBC,UAAO,EACPf,mBAAA,CAA4D,OAA5DgB,UAA4D,EAApC,eAAa,GAAAX,gBAAA,CAAGC,MAAA,CAAAW,UAAU,IAAG,GAAC,iBACtDjB,mBAAA,CAmBO,QAnBPkB,UAmBO,GAlBLC,UAA6C,E,gBAC7CnB,mBAAA,CAOE;IANAoB,IAAI,EAAC,QAAQ;IACbC,IAAI,EAAC,EAAE;IACPC,EAAE,EAAC,QAAQ;+DACFhB,MAAA,CAAAiB,kBAAkB,GAAAC,MAAA;IAC3BC,GAAG,EAAC,GAAG;IACNC,GAAG,EAAEpB,MAAA,CAAAqB;sDAFGrB,MAAA,CAAAiB,kBAAkB,E,GAI7BK,UAAiD,E,gBACjD5B,mBAAA,CAOE;IANAoB,IAAI,EAAC,QAAQ;IACbC,IAAI,EAAC,EAAE;IACPC,EAAE,EAAC,UAAU;+DACJhB,MAAA,CAAAuB,oBAAoB,GAAAL,MAAA;IAC7BC,GAAG,EAAC,GAAG;IACNC,GAAG,EAAEpB,MAAA,CAAAwB;sDAFGxB,MAAA,CAAAuB,oBAAoB,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}