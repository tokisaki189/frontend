{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"totalPrice\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, _toDisplayString(_ctx.plane), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(_ctx.formatDate(_ctx.departureDate)), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(_ctx.departureCity), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(_ctx.departureTime), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(_ctx.formatDate(_ctx.arrivalDate)), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(_ctx.arrivalCity), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(_ctx.arrivalTime), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_1, \"Total Price: \" + _toDisplayString(_ctx.totalprice) + \"$\", 1 /* TEXT */), _createTextVNode(\" p \")]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_toDisplayString","_ctx","plane","formatDate","departureDate","departureCity","departureTime","arrivalDate","arrivalCity","arrivalTime","_hoisted_1","totalprice"],"sources":["/home/prism/Documents/flyticket/src/views/EditView.vue"],"sourcesContent":["<template>\n  <div>\n    <p>{{ plane }}</p>\n    <p>{{ formatDate(departureDate) }}</p>\n    <p>{{ departureCity }}</p>\n    <p>{{ departureTime }}</p>\n    <p>{{ formatDate(arrivalDate) }}</p>\n    <p>{{ arrivalCity }}</p>\n    <p>{{ arrivalTime }}</p>\n    <div class=\"totalPrice\">Total Price: {{ totalprice }}$</div>\n   p\n  </div>\n</template>\n<script>\nimport { onMounted, ref, computed } from \"vue\";\nimport { useRoute } from \"vue-router\";\n\nimport api from \"../api\";\nexport default {\n  setup() {\n    let route = useRoute();\n    let id = route.query.id;\n    let plane = ref();\n    let businessSeatOrder = ref(0);\n    let normalSeatOrder = ref(0);\n    let newbusinessSeatOrder = ref();\n    let newnormalSeatOrder = ref();\n    let totalprice = ref(0);\n    let departureTime = ref();\n    let arrivalTime = ref();\n    let normalSeat = ref();\n    let businessSeat = ref();\n    let normalPrice = ref();\n    let businessPrice = ref();\n    let departureDate = ref();\n    let departureCity = ref();\n    let arrivalDate = ref();\n    let arrivalCity = ref();\n    onMounted(() => {\n      console.log(id);\n      api\n        .get(\"/orderEdit/\" + id)\n        .then((response) => {\n          console.log(response.data);\n          plane.value = response.data[0].planes;\n          businessSeatOrder.value = response.data[0].business_seat_order;\n          normalSeatOrder.value = response.data[0].normal_seat_order;\n          normalSeat.value = response.data[0].normal_seat;\n          businessSeat.value = response.data[0].business_seat;\n          departureTime.value = response.data[0].departure_time;\n          arrivalTime.value = response.data[0].arrival_time;\n          totalprice.value = response.data[0].total_price;\n          departureDate.value = response.data[0].departure_date;\n          departureCity.value = response.data[0].departure_city_name;\n          arrivalDate.value = response.data[0].arrival_date;\n          arrivalCity.value = response.data[0].arrival_city_name;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    });\n    let totalprice = computed(() => {\n      let result =\n        normalSeatOrder.value * normalPrice.value +\n        businessSeatOrder.value * businessPrice.value;\n      return isNaN(result) ? 0 : result;\n    });\n    function formatDate(date) {\n      let dateObj = new Date(date);\n      const year = dateObj.getFullYear();\n      const month = dateObj.getMonth() + 1;\n      const day = dateObj.getDate();\n      return `${day}-${month}-${year}`;\n    }\n    return {\n      formatDate,\n      plane,\n      businessSeatOrder,\n      normalSeatOrder,\n      newbusinessSeatOrder,\n      newnormalSeatOrder,\n      totalprice,\n      departureCity,\n      departureDate,\n      arrivalDate,\n      arrivalCity,\n      normalSeat,\n      businessSeat,\n      normalPrice,\n      businessPrice,\n      departureTime,\n      arrivalTime,\n    };\n  },\n};\n</script>\n<style></style>\n"],"mappings":";;EASSA,KAAK,EAAC;AAAY;;uBARzBC,mBAAA,CAUM,cATJC,mBAAA,CAAkB,WAAAC,gBAAA,CAAZC,IAAA,CAAAC,KAAK,kBACXH,mBAAA,CAAsC,WAAAC,gBAAA,CAAhCC,IAAA,CAAAE,UAAU,CAACF,IAAA,CAAAG,aAAa,mBAC9BL,mBAAA,CAA0B,WAAAC,gBAAA,CAApBC,IAAA,CAAAI,aAAa,kBACnBN,mBAAA,CAA0B,WAAAC,gBAAA,CAApBC,IAAA,CAAAK,aAAa,kBACnBP,mBAAA,CAAoC,WAAAC,gBAAA,CAA9BC,IAAA,CAAAE,UAAU,CAACF,IAAA,CAAAM,WAAW,mBAC5BR,mBAAA,CAAwB,WAAAC,gBAAA,CAAlBC,IAAA,CAAAO,WAAW,kBACjBT,mBAAA,CAAwB,WAAAC,gBAAA,CAAlBC,IAAA,CAAAQ,WAAW,kBACjBV,mBAAA,CAA4D,OAA5DW,UAA4D,EAApC,eAAa,GAAAV,gBAAA,CAAGC,IAAA,CAAAU,UAAU,IAAG,GAAC,iB,iBAAM,KAE9D,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}