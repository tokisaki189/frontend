{"ast":null,"code":"import { onMounted, computed, onUpdated } from \"vue\";\nimport api from \"../api\";\nimport { ref } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport con from \"connect\";\nexport default {\n  setup() {\n    const route = useRoute();\n    let flightId = route.query.id;\n    let flightDetail = ref(\"\");\n    let normalQuantity = ref(0);\n    let businessQuantity = ref(0);\n    let normalPrice = ref(\"\");\n    let businessPrice = ref(\"\");\n    let plane = ref(\"\");\n    let departureCity = ref(\"\");\n    let arrivalCity = ref(\"\");\n    let departureDate = ref(\"\");\n    let departureTime = ref(\"\");\n    let arrivalTime = ref(\"\");\n    let arrivalDate = ref(\"\");\n    let normalSeat = ref(\"\");\n    let normalSeatPrice = ref(\"\");\n    let businessSeat = ref(\"\");\n    let businessSeatPrice = ref(\"\");\n    // let totalPrice = computed(() => {\n    //   return (\n    //     normalQuantity.value * flightDetail.value[0].normal_seat_price +\n    //     businessQuantity.value * flightDetail.value[0].business_seat_price\n    //   );\n    // });\n    onMounted(() => {\n      console.log(flightId);\n      api.get(\"/orderflight/\" + flightId, {}).then(response => {\n        flightDetail.value = response.data;\n        plane = flightDetail.value[0].planes;\n        normalPrice.value = flightDetail.value[0].normal_seat_price;\n        businessPrice.value = flightDetail.value[0].business_seat_price;\n        console.log(normalPrice.value + \" \" + businessPrice.value);\n      }).catch(error => {\n        console.error(error);\n      });\n    });\n    console.log(plane);\n    let totalPrice = computed(() => {\n      let result = normalQuantity.value * normalPrice.value + businessQuantity.value * businessPrice.value;\n      return isNaN(result) ? 0 : result;\n    });\n    onUpdated(() => {\n      console.log(totalPrice.value);\n    });\n    return {\n      flightId,\n      flightDetail,\n      totalPrice,\n      normalQuantity,\n      businessQuantity,\n      normalPrice,\n      businessPrice,\n      plane,\n      departureCity,\n      arrivalCity,\n      departureDate,\n      departureTime,\n      arrivalTime,\n      arrivalDate,\n      normalSeat,\n      normalSeatPrice,\n      businessSeat,\n      businessSeatPrice\n    };\n  }\n};","map":{"version":3,"names":["onMounted","computed","onUpdated","api","ref","useRoute","con","setup","route","flightId","query","id","flightDetail","normalQuantity","businessQuantity","normalPrice","businessPrice","plane","departureCity","arrivalCity","departureDate","departureTime","arrivalTime","arrivalDate","normalSeat","normalSeatPrice","businessSeat","businessSeatPrice","console","log","get","then","response","value","data","planes","normal_seat_price","business_seat_price","catch","error","totalPrice","result","isNaN"],"sources":["/home/prism/Documents/flyticket/src/views/OrderView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div>here</div>\n    <!-- <div>{{ flightDetail[0] }}</div> -->\n    <div>{{ plane }}</div>\n    <label for=\"normal-seat\"> Normal </label>\n    <input type=\"number\" v-model=\"normalQuantity\" id=\"normal-seat\" />\n    <label for=\"business-seat\"> Business</label>\n    <input\n      type=\"number\"\n      v-model=\"businessQuantity\"\n      name=\"\"\n      id=\"business=seat\"\n    />\n    <div>Price: {{ totalPrice }}</div>\n    <button>Order</button>\n  </div>\n</template>\n<script>\nimport { onMounted, computed, onUpdated } from \"vue\";\nimport api from \"../api\";\nimport { ref } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport con from \"connect\";\nexport default {\n  setup() {\n    const route = useRoute();\n    let flightId = route.query.id;\n    let flightDetail = ref(\"\");\n    let normalQuantity = ref(0);\n    let businessQuantity = ref(0);\n    let normalPrice = ref(\"\");\n    let businessPrice = ref(\"\");\n    let plane = ref(\"\");\n    let departureCity = ref(\"\");\n    let arrivalCity = ref(\"\");\n    let departureDate = ref(\"\");\n    let departureTime = ref(\"\");\n    let arrivalTime = ref(\"\");\n    let arrivalDate = ref(\"\");\n    let normalSeat = ref(\"\");\n    let normalSeatPrice = ref(\"\");\n    let businessSeat = ref(\"\");\n    let businessSeatPrice = ref(\"\");\n    // let totalPrice = computed(() => {\n    //   return (\n    //     normalQuantity.value * flightDetail.value[0].normal_seat_price +\n    //     businessQuantity.value * flightDetail.value[0].business_seat_price\n    //   );\n    // });\n    onMounted(() => {\n      console.log(flightId);\n      api\n        .get(\"/orderflight/\" + flightId, {})\n        .then((response) => {\n          flightDetail.value = response.data;\n          plane = flightDetail.value[0].planes;\n          normalPrice.value = flightDetail.value[0].normal_seat_price;\n          businessPrice.value = flightDetail.value[0].business_seat_price;\n          console.log(normalPrice.value + \" \" + businessPrice.value);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    });\n    console.log(plane);\n\n    let totalPrice = computed(() => {\n      let result =\n        normalQuantity.value * normalPrice.value +\n        businessQuantity.value * businessPrice.value;\n      return isNaN(result) ? 0 : result;\n    });\n    onUpdated(() => {\n      console.log(totalPrice.value);\n    });\n    return {\n      flightId,\n      flightDetail,\n      totalPrice,\n      normalQuantity,\n      businessQuantity,\n      normalPrice,\n      businessPrice,\n      plane,\n      departureCity,\n      arrivalCity,\n      departureDate,\n      departureTime,\n      arrivalTime,\n      arrivalDate,\n      normalSeat,\n      normalSeatPrice,\n      businessSeat,\n      businessSeatPrice,\n    };\n  },\n};\n</script>\n<style scoped>\n.container {\n  margin-top: 10rem;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}